{"version":3,"sources":["../../lib/index.tsx"],"names":["customTypeArray","customWithArray","styleButton","dashed","borderStyle","ghost","link","boxShadow","borderColor","disableAnimation","Button","_isLink","props","_isDashed","_isGhost","_type","_ghost","_style","_linkStyle","_classes","x"],"mappings":";;;;;;;;;;;;;;;;;;;MAAA,K;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAOA,QAAMA,eAAe,GAAG,CAAA,SAAA,EAAA,SAAA,EAAA,MAAA,EAAA,MAAA,EAAA,WAAA,EAAxB,QAAwB,CAAxB;AAQA,QAAMC,eAAe,GAAG,CAAA,MAAA,EAAA,QAAA,EAAxB,OAAwB,CAAxB;AAeA,QAAMC,WAAW,GAAG;AAClBC,IAAAA,MAAM,EAAE;AACNC,MAAAA,WAAW,EAAE;AADP,KADU;AAIlBC,IAAAA,KAAK,EAAE;AACLD,MAAAA,WAAW,EAAE;AADR,KAJW;AAOlBE,IAAAA,IAAI,EAAE;AACJF,MAAAA,WAAW,EADP,MAAA;AAEJG,MAAAA,SAAS,EAFL,MAAA;AAGJC,MAAAA,WAAW,EAAE;AAHT;AAPY,GAApB;AAcA,QAAMC,gBAAwB,GAA9B,mBAAA;AAEA,QAAMC,MAAM,GAAA,aAAG,KAAK,CAAL,UAAA,CAAiB,CAAA,KAAA,EAAA,GAAA,KAAkC;AAChE,UAAMC,OAAO,GAAGC,KAAK,CAALA,IAAAA,KAAhB,MAAA;;AACA,UAAMC,SAAS,GAAGD,KAAK,CAALA,IAAAA,KAAlB,QAAA;;AACA,UAAME,QAAQ,GAAGF,KAAK,CAALA,IAAAA,KAAjB,OAAA;;AACA,UAAMG,KAAU,GAAGH,KAAK,CAAxB,IAAA;;AACA,UAAMI,MAAe,GACnBH,SAAS,IAATA,QAAAA,IAAAA,OAAAA,IAAoCD,KAAK,CAAzCC,KAAAA,GAAAA,IAAAA,GADF,KAAA;;AAEA,UAAMI,MAAM,GAAGL,KAAK,CAALA,IAAAA,GAAaV,WAAW,CAACU,KAAK,CAA9BA,IAAwB,CAAxBA,GAAf,SAAA;;AACA,UAAMM,UAAU,GAAGP,OAAO,GAAA,gBAAA,GAA1B,SAAA;;AACA,UAAMQ,QAAQ,GAAG,CAAA,UAAA,EAAaP,KAAK,CAAlB,SAAA,EAAA,MAAA,CAAsCQ,CAAD,IAAO,CAAC,CAA7C,CAAA,EAAA,IAAA,CAAjB,GAAiB,CAAjB;;AACA,WAAA,aACE,KAAA,CAAA,aAAA,CAAA,gBAAA,EAAA,QAAA,CAAA,EAAA,EAAA,KAAA,EAAA;AAEE,MAAA,GAAG,EAFL,GAAA;AAGE,MAAA,SAAS,EAHX,QAAA;AAIE,MAAA,KAAK,EAAA,aAAA,CAAA,aAAA,CAAA,EAAA,EAAA,MAAA,CAAA,EAAkBR,KAAK,CAJ9B,KAIO,CAJP;AAKE,MAAA,KAAK,EALP,MAAA;AAME,MAAA,IAAI,EAAEG;AANR,KAAA,CAAA,EAQGH,KAAK,CATV,QACE,CADF;AAVF,GAAe,CAAf;oBAwBA,M","sourcesContent":["import * as React from 'react';\r\nimport ButtonOriginal, {\r\n  ButtonProps as ButtonPropsOriginal,\r\n  ButtonType as ButtonTypeOriginal,\r\n} from 'antd/lib/button/button';\r\n\r\ntype Mod<T, R> = Omit<T, keyof R> & R;\r\nconst customTypeArray = [\r\n  'success',\r\n  'warning',\r\n  'info',\r\n  'dark',\r\n  'lightdark',\r\n  'danger',\r\n] as const;\r\nconst customWithArray = ['link', 'dashed', 'ghost'] as const;\r\nexport type ButtonType = ButtonTypeOriginal | typeof customTypeArray[number];\r\ntype withProps = typeof customWithArray[number];\r\ntype ModButtonProps = Mod<\r\n  ButtonPropsOriginal,\r\n  {\r\n    type?: ButtonType;\r\n  }\r\n>;\r\n\r\nexport type ButtonProps = ModButtonProps & {\r\n  with?: withProps;\r\n  style?: React.CSSProperties;\r\n};\r\n\r\nconst styleButton = {\r\n  dashed: {\r\n    borderStyle: 'dashed',\r\n  },\r\n  ghost: {\r\n    borderStyle: 'solid',\r\n  },\r\n  link: {\r\n    borderStyle: 'none',\r\n    boxShadow: 'none',\r\n    borderColor: 'transparent',\r\n  },\r\n};\r\n\r\nconst disableAnimation: string = 'disable-animation';\r\n\r\nconst Button = React.forwardRef((props: ButtonProps, ref: any) => {\r\n  const _isLink = props.with === 'link';\r\n  const _isDashed = props.with === 'dashed';\r\n  const _isGhost = props.with === 'ghost';\r\n  const _type: any = props.type;\r\n  const _ghost: boolean =\r\n    _isDashed || _isGhost || _isLink || props.ghost ? true : false;\r\n  const _style = props.with ? styleButton[props.with] : undefined;\r\n  const _linkStyle = _isLink ? disableAnimation : undefined;\r\n  const _classes = [_linkStyle, props.className].filter((x) => !!x).join(' ');\r\n  return (\r\n    <ButtonOriginal\r\n      {...props}\r\n      ref={ref}\r\n      className={_classes}\r\n      style={{ ..._style, ...props.style }}\r\n      ghost={_ghost}\r\n      type={_type}\r\n    >\r\n      {props.children}\r\n    </ButtonOriginal>\r\n  );\r\n});\r\n\r\nexport default Button;\r\n"],"file":"index.js"}